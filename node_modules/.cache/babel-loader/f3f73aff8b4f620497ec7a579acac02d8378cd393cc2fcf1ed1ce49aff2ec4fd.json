{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux'; //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'; // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailsReducer, productDeleteReducer, productCreateReducer, productUpdateReducer, productReviewCreateReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailReducer, userUpdateProfileReducer, userListReducer, userUpdateReducer, userDeleteReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer, orderListReducer, orderDeliverReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productDelete: productDeleteReducer,\n  productCreate: productCreateReducer,\n  productUpdate: productUpdateReducer,\n  productReviewCreate: productReviewCreateReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer,\n  orderList: orderListReducer,\n  orderDeliver: orderDeliverReducer\n}); //reducer uguale alla combinazione di reducers\n//all'avvio dell'app vengono creati in redux contenitori vuoti dei reducers\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []; //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {}; //se localstorage è vuoto ALLORA {}\n\nconst initialState = {\n  //lo state iniziale che poi viene aggiornato dai reducer è composto da KEY-VALUE con un JSON a secondo valore\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n\n  userLogin: {\n    userInfo: userInfoFromStorage\n  } // della sessione precedente\n};\n\nconst middleware = [thunk]; //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // ... spread operator\n\nexport default store;\n\n//MODUS OPERANDI\n\n//BACKEND\n//views, url\n\n//FRONTEND\n//costants, reducers(&store.js), actions\n//screens","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","productReviewCreateReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailReducer","userUpdateProfileReducer","userListReducer","userUpdateReducer","userDeleteReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","orderListReducer","orderDeliverReducer","reducer","productList","productDetails","productDelete","productCreate","productUpdate","productReviewCreate","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","userUpdate","orderCreate","orderDetails","orderPay","orderListMy","orderList","orderDeliver","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"sources":["/Users/francesco/Desktop/ecommerce/frontend/src/store.js"],"sourcesContent":["import {createStore, combineReducers, applyMiddleware } from 'redux' //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'                                      // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { productListReducer, \n         productDetailsReducer, \n         productDeleteReducer, \n         productCreateReducer, \n         productUpdateReducer,\n         productReviewCreateReducer, } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { \n    userLoginReducer, \n    userRegisterReducer, \n    userDetailReducer, \n    userUpdateProfileReducer, \n    userListReducer, \n    userUpdateReducer,\n    userDeleteReducer } from './reducers/userReducers'\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer, orderListReducer, orderDeliverReducer} from './reducers/orderReducers'\n\nconst reducer = combineReducers({\n     productList: productListReducer,\n     productDetails: productDetailsReducer,\n     productDelete: productDeleteReducer,\n     productCreate: productCreateReducer,\n     productUpdate: productUpdateReducer,\n     productReviewCreate: productReviewCreateReducer,\n     \n     cart: cartReducer,\n     userLogin: userLoginReducer,\n     userRegister: userRegisterReducer,\n     userDetails: userDetailReducer,\n     userUpdateProfile: userUpdateProfileReducer,\n     userList: userListReducer,\n     userDelete: userDeleteReducer,\n     userUpdate: userUpdateReducer,\n\n     orderCreate: orderCreateReducer,\n     orderDetails: orderDetailsReducer,\n     orderPay: orderPayReducer,\n     orderListMy: orderListMyReducer,\n     orderList: orderListReducer,\n     orderDeliver: orderDeliverReducer,\n\n     \n\n}) //reducer uguale alla combinazione di reducers\n//all'avvio dell'app vengono creati in redux contenitori vuoti dei reducers\n\n\n\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\n    JSON.parse(localStorage.getItem('cartItems')) : [] //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\n    JSON.parse(localStorage.getItem('userInfo')) : null \n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\n    JSON.parse(localStorage.getItem('shippingAddress')) : {} //se localstorage è vuoto ALLORA {}\n\n\n\nconst initialState = {//lo state iniziale che poi viene aggiornato dai reducer è composto da KEY-VALUE con un JSON a secondo valore\n    cart: { \n        cartItems: cartItemsFromStorage,\n        shippingAddress: shippingAddressFromStorage,\n    }, //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n\n    userLogin: { userInfo: userInfoFromStorage} // della sessione precedente\n}\n\n\n\nconst middleware = [thunk] //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState,\n    composeWithDevTools(applyMiddleware(...middleware))) // ... spread operator\n\n\n\nexport default store\n\n//MODUS OPERANDI\n\n//BACKEND\n//views, url\n\n//FRONTEND\n//costants, reducers(&store.js), actions\n//screens"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO,EAAC;AACrE,OAAOC,KAAK,MAAM,aAAa,EAAsC;AACrE,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,kBAAkB,EAClBC,qBAAqB,EACrBC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,0BAA0B,QAAS,4BAA4B;AACxE,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SACIC,gBAAgB,EAChBC,mBAAmB,EACnBC,iBAAiB,EACjBC,wBAAwB,EACxBC,eAAe,EACfC,iBAAiB,EACjBC,iBAAiB,QAAQ,yBAAyB;AACtD,SAASC,kBAAkB,EAAEC,mBAAmB,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,mBAAmB,QAAO,0BAA0B;AAE7J,MAAMC,OAAO,GAAGxB,eAAe,CAAC;EAC3ByB,WAAW,EAAErB,kBAAkB;EAC/BsB,cAAc,EAAErB,qBAAqB;EACrCsB,aAAa,EAAErB,oBAAoB;EACnCsB,aAAa,EAAErB,oBAAoB;EACnCsB,aAAa,EAAErB,oBAAoB;EACnCsB,mBAAmB,EAAErB,0BAA0B;EAE/CsB,IAAI,EAAErB,WAAW;EACjBsB,SAAS,EAAErB,gBAAgB;EAC3BsB,YAAY,EAAErB,mBAAmB;EACjCsB,WAAW,EAAErB,iBAAiB;EAC9BsB,iBAAiB,EAAErB,wBAAwB;EAC3CsB,QAAQ,EAAErB,eAAe;EACzBsB,UAAU,EAAEpB,iBAAiB;EAC7BqB,UAAU,EAAEtB,iBAAiB;EAE7BuB,WAAW,EAAErB,kBAAkB;EAC/BsB,YAAY,EAAErB,mBAAmB;EACjCsB,QAAQ,EAAErB,eAAe;EACzBsB,WAAW,EAAErB,kBAAkB;EAC/BsB,SAAS,EAAErB,gBAAgB;EAC3BsB,YAAY,EAAErB;AAInB,CAAC,CAAC,EAAC;AACH;;AAKA,MAAMsB,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GAC1DC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,EAAC;;AAEvD,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACxDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI;AAEvD,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GACtEC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC;;AAI7D,MAAMK,YAAY,GAAG;EAAC;EAClBrB,IAAI,EAAE;IACFsB,SAAS,EAAER,oBAAoB;IAC/BS,eAAe,EAAEH;EACrB,CAAC;EAAE;;EAEHnB,SAAS,EAAE;IAAEuB,QAAQ,EAAEL;EAAmB,CAAC,CAAC;AAChD,CAAC;;AAID,MAAMM,UAAU,GAAG,CAACtD,KAAK,CAAC,EAAC;;AAE3B,MAAMuD,KAAK,GAAG1D,WAAW,CAACyB,OAAO,EAAE4B,YAAY,EAC3CjD,mBAAmB,CAACF,eAAe,CAAC,GAAGuD,UAAU,CAAC,CAAC,CAAC,EAAC;;AAIzD,eAAeC,KAAK;;AAEpB;;AAEA;AACA;;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}