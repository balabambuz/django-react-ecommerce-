{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux'; //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'; // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducers, productDetailsReducers } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailReducer, userUpdateProfileReducer } from './reducers/userReducers';\nconst reducer = combineReducers({\n  productList: productListReducers,\n  productDetails: productDetailsReducers,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailReducer,\n  userUpdateProfile: userUpdateProfileReducer\n}); //reducer uguale alla combinazione di reducers\n//all'avvio dell'app vengono creati in redux contenitori vuoti dei reducers\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []; //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : null;\nconst initialState = {\n  //lo state iniziale che poi viene aggiornato dai reducer è composto da KEY-VALUE con un JSON a secondo valore\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n\n  userLogin: {\n    userInfo: userInfoFromStorage\n  } // della sessione precedente\n};\n\nconst middleware = [thunk]; //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // ... spread operator\n\nexport default store;","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducers","productDetailsReducers","cartReducer","userLoginReducer","userRegisterReducer","userDetailReducer","userUpdateProfileReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"sources":["/Users/francesco/Desktop/ecommerce/frontend/src/store.js"],"sourcesContent":["import {createStore, combineReducers, applyMiddleware } from 'redux' //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'                                      // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { productListReducers, productDetailsReducers } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDetailReducer, userUpdateProfileReducer } from './reducers/userReducers'\n\nconst reducer = combineReducers({\n     productList: productListReducers,\n     productDetails: productDetailsReducers,\n     cart: cartReducer,\n     userLogin: userLoginReducer,\n     userRegister: userRegisterReducer,\n     userDetails: userDetailReducer,\n     userUpdateProfile: userUpdateProfileReducer,\n\n}) //reducer uguale alla combinazione di reducers\n//all'avvio dell'app vengono creati in redux contenitori vuoti dei reducers\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\n    JSON.parse(localStorage.getItem('cartItems')) : [] //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\n    JSON.parse(localStorage.getItem('userInfo')) : null \n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\n    JSON.parse(localStorage.getItem('shippingAddress')) : null\n\n\n    const initialState = {//lo state iniziale che poi viene aggiornato dai reducer è composto da KEY-VALUE con un JSON a secondo valore\n    cart: { \n        cartItems: cartItemsFromStorage,\n        shippingAddress: shippingAddressFromStorage,\n    }, //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n\n    userLogin: { userInfo: userInfoFromStorage} // della sessione precedente\n}\n\nconst middleware = [thunk] //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState,\n    composeWithDevTools(applyMiddleware(...middleware))) // ... spread operator\n\n\n\nexport default store"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO,EAAC;AACrE,OAAOC,KAAK,MAAM,aAAa,EAAsC;AACrE,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,mBAAmB,EAAEC,sBAAsB,QAAQ,4BAA4B;AACxF,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,gBAAgB,EAAEC,mBAAmB,EAAEC,iBAAiB,EAAEC,wBAAwB,QAAQ,yBAAyB;AAE5H,MAAMC,OAAO,GAAGX,eAAe,CAAC;EAC3BY,WAAW,EAAER,mBAAmB;EAChCS,cAAc,EAAER,sBAAsB;EACtCS,IAAI,EAAER,WAAW;EACjBS,SAAS,EAAER,gBAAgB;EAC3BS,YAAY,EAAER,mBAAmB;EACjCS,WAAW,EAAER,iBAAiB;EAC9BS,iBAAiB,EAAER;AAExB,CAAC,CAAC,EAAC;AACH;;AAEA,MAAMS,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GAC1DC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,EAAC;;AAEvD,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACxDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI;AAEvD,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,GACtEC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC,GAAG,IAAI;AAG1D,MAAMK,YAAY,GAAG;EAAC;EACtBZ,IAAI,EAAE;IACFa,SAAS,EAAER,oBAAoB;IAC/BS,eAAe,EAAEH;EACrB,CAAC;EAAE;;EAEHV,SAAS,EAAE;IAAEc,QAAQ,EAAEL;EAAmB,CAAC,CAAC;AAChD,CAAC;;AAED,MAAMM,UAAU,GAAG,CAAC5B,KAAK,CAAC,EAAC;;AAE3B,MAAM6B,KAAK,GAAGhC,WAAW,CAACY,OAAO,EAAEe,YAAY,EAC3CvB,mBAAmB,CAACF,eAAe,CAAC,GAAG6B,UAAU,CAAC,CAAC,CAAC,EAAC;;AAIzD,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}