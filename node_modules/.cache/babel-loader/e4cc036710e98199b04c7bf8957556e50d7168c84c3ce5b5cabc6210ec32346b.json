{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_REGISTER_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_DETAILS_FAIL, USER_DETAILS_RESET, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_LIST_RESET\n//USER_UPDATE_PROFILE_RESET,\n} from '../constants/userConstants';\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants';\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants';\nexport const login = (email, password) => async dispatch => {\n  //prende gli argomenti e li passa al backend \n\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      //variabile di configurazione della richiesta POST\n      headers: {\n        'ContentType': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login/',\n    //li manda all'url del login-in come oggetto \n    {\n      'username': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  //spedisco direttamente le costanti ai reducers\n  localStorage.removeItem('userInfo');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_DETAILS_RESET\n  }); //pulisco USER_DETAILS in modo da non trovarlo pieno con le utenze vecchie nel \n  dispatch({\n    type: ORDER_LIST_MY_RESET\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n  dispatch({\n    type: CART_CLEAR_ITEMS\n  });\n};\nexport const register = (name, email, password) => async dispatch => {\n  //prende gli argomenti e li passa al backend \n\n  try {\n    //leggo dall'alto verso il basso\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      //variabile di configurazione della richiesta POST\n      headers: {\n        'ContentType': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/register/',\n    //li manda all'url del login-in come oggetto \n    {\n      'name': name,\n      'email': email,\n      'password': password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  //prendo l'id per ottenere un utente specifico\n\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      } //vado dentro a redux e prendo il token di accesso da userInfo\n    } = getState();\n    const config = {\n      headers: {\n        'ContentType': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}/`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  //prendo l'id per ottenere un utente specifico\n\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      } //vado dentro a redux e prendo il token di accesso da userInfo\n    } = getState();\n    const config = {\n      headers: {\n        'ContentType': 'application/json',\n        Authorization: `Bearer ${userInfo.token}` //il token serve per passare \"isAuthenticated\"  \n      }\n    }; //dall'authToken capisce anche su quale utente attuare le modifiche \n\n    const {\n      data\n    } = await axios.put(`/api/users/profile/update/`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'ContentType': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(\n    //recupero i dati dall backend e li impacchetto\n    `/api/users/`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.response && error.response.data.detail ? error.response.data.detail : error.message\n    });\n  }\n};","map":{"version":3,"names":["axios","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_DETAILS_FAIL","USER_DETAILS_RESET","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_LIST_RESET","ORDER_LIST_MY_RESET","CART_CLEAR_ITEMS","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","detail","message","logout","removeItem","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers"],"sources":["/Users/francesco/Desktop/ecommerce/frontend/src/actions/userActions.js"],"sourcesContent":["import axios from 'axios'\nimport {\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGIN_FAIL,\n\n    USER_LOGOUT,\n\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n    USER_REGISTER_FAIL,\n\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_FAIL,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_FAIL,\n\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_FAIL,\n    USER_LIST_RESET,\n    //USER_UPDATE_PROFILE_RESET,\n\n} from '../constants/userConstants'\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\n\nexport const login = (email, password) => async (dispatch) => {//prende gli argomenti e li passa al backend \n\n    try{\n        dispatch({\n            type: USER_LOGIN_REQUEST\n        })\n\n        const config = { //variabile di configurazione della richiesta POST\n            headers: {\n                'ContentType' : 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/login/',                //li manda all'url del login-in come oggetto \n            {'username': email, 'password': password} ,config )\n        \n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n        \n        dispatch({\n            type: USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message\n        })\n\n    }\n}\n\n  \nexport const logout = () => (dispatch) => {//spedisco direttamente le costanti ai reducers\n    localStorage.removeItem('userInfo')\n    dispatch({type: USER_LOGOUT})\n    dispatch({type: USER_DETAILS_RESET}) //pulisco USER_DETAILS in modo da non trovarlo pieno con le utenze vecchie nel \n    dispatch({type: ORDER_LIST_MY_RESET})\n    dispatch({type: USER_LIST_RESET})\n    dispatch({type: CART_CLEAR_ITEMS})\n}\n\n\n\nexport const register = (name, email, password) => async (dispatch) => {//prende gli argomenti e li passa al backend \n\n    try{//leggo dall'alto verso il basso\n        dispatch({\n            type: USER_REGISTER_REQUEST\n        })\n\n        const config = { //variabile di configurazione della richiesta POST\n            headers: {\n                'ContentType' : 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/register/',                //li manda all'url del login-in come oggetto \n            {'name':name, 'email': email, 'password': password} ,config )\n        \n        dispatch({\n            type:USER_REGISTER_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n        \n        dispatch({\n            type: USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message\n        })\n\n    }\n}\n\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {//prendo l'id per ottenere un utente specifico\n\n    try{\n        dispatch({\n            type: USER_DETAILS_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo }, //vado dentro a redux e prendo il token di accesso da userInfo\n        } = getState()\n\n        const config = { \n            headers: {\n                'ContentType' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}`\n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/users/${id}/`,                \n             config )\n        \n        dispatch({\n            type:USER_DETAILS_SUCCESS,\n            payload:data\n        })\n\n    \n    }catch(error){\n        \n        dispatch({\n            type: USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message\n        })\n\n    }\n}\n\n\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {//prendo l'id per ottenere un utente specifico\n\n    try{\n        dispatch({\n            type: USER_UPDATE_PROFILE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo }, //vado dentro a redux e prendo il token di accesso da userInfo\n        } = getState()\n\n        const config = { \n            headers: {\n                'ContentType' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}` //il token serve per passare \"isAuthenticated\"  \n            }                                            \n        }                                                 //dall'authToken capisce anche su quale utente attuare le modifiche \n\n        const {data} = await axios.put(\n            `/api/users/profile/update/`, \n             user,               \n             config )\n        \n        dispatch({\n            type:USER_UPDATE_PROFILE_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n    \n    }catch(error){\n        \n        dispatch({\n            type: USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message\n        })\n\n    }\n}\n\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n\n    try{\n        dispatch({\n            type: USER_LIST_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config = { \n            headers: {\n                'ContentType' : 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }                                            \n        }                                                 \n\n        const {data} = await axios.get( //recupero i dati dall backend e li impacchetto\n            `/api/users/`,                \n             config )\n        \n        dispatch({\n            type:USER_LIST_SUCCESS,\n            payload:data\n        })\n    \n    }catch(error){\n        \n        dispatch({\n            type: USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail \n            ? error.response.data.detail\n            : error.message\n        })\n\n    }\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}