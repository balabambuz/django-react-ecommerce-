{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware}from'redux';//prende tutti i reducers e li combina in un unico reducer\nimport thunk from'redux-thunk';// thunk chiama action creators che ritornano una funzione invece di un action object  \nimport{composeWithDevTools}from'redux-devtools-extension';import{productListReducer,productDetailsReducer,productDeleteReducer,productCreateReducer,productUpdateReducer,productReviewCreateReducer,productTopRatedReducer}from'./reducers/productReducers';import{cartReducer}from'./reducers/cartReducers';import{userLoginReducer,userRegisterReducer,userDetailReducer,userUpdateProfileReducer,userListReducer,userUpdateReducer,userDeleteReducer}from'./reducers/userReducers';import{orderCreateReducer,orderDetailsReducer,orderPayReducer,orderListMyReducer,orderListReducer,orderDeliverReducer}from'./reducers/orderReducers';import{postListReducer,workListReducer}from'./reducers/mediaReducers';var reducer=combineReducers({productList:productListReducer,productDetails:productDetailsReducer,productDelete:productDeleteReducer,productCreate:productCreateReducer,productUpdate:productUpdateReducer,productReviewCreate:productReviewCreateReducer,productTopRated:productTopRatedReducer,cart:cartReducer,userLogin:userLoginReducer,userRegister:userRegisterReducer,userDetails:userDetailReducer,userUpdateProfile:userUpdateProfileReducer,userList:userListReducer,userDelete:userDeleteReducer,userUpdate:userUpdateReducer,orderCreate:orderCreateReducer,orderDetails:orderDetailsReducer,orderPay:orderPayReducer,orderListMy:orderListMyReducer,orderList:orderListReducer,orderDeliver:orderDeliverReducer,postList:postListReducer,workList:workListReducer});//reducer uguale alla combinazione di reducers\n//all'avvio dell'app vengono creati in redux contenitori vuoti dei reducers\nvar cartItemsFromStorage=localStorage.getItem('cartItems')?JSON.parse(localStorage.getItem('cartItems')):[];//se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\nvar userInfoFromStorage=localStorage.getItem('userInfo')?JSON.parse(localStorage.getItem('userInfo')):null;var shippingAddressFromStorage=localStorage.getItem('shippingAddress')?JSON.parse(localStorage.getItem('shippingAddress')):{};//se localstorage è vuoto ALLORA {}\nvar initialState={//lo state iniziale che poi viene aggiornato dai reducer è composto da KEY-VALUE con un JSON a secondo valore\ncart:{cartItems:cartItemsFromStorage,shippingAddress:shippingAddressFromStorage},//se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \nuserLogin:{userInfo:userInfoFromStorage}// della sessione precedente\n};var middleware=[thunk];//passo come array di middleware per aggiungerne di più in una volta\nvar store=createStore(reducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));// ... spread operator\nexport default store;//MODUS OPERANDI\n//BACKEND\n//views, url\n//FRONTEND\n//costants, reducers(&store.js), actions\n//screens","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducer","productDetailsReducer","productDeleteReducer","productCreateReducer","productUpdateReducer","productReviewCreateReducer","productTopRatedReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailReducer","userUpdateProfileReducer","userListReducer","userUpdateReducer","userDeleteReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","orderListReducer","orderDeliverReducer","postListReducer","workListReducer","reducer","productList","productDetails","productDelete","productCreate","productUpdate","productReviewCreate","productTopRated","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","userDelete","userUpdate","orderCreate","orderDetails","orderPay","orderListMy","orderList","orderDeliver","postList","workList","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store","apply"],"sources":["/Users/francesco/Downloads/ecommerce copia/backend/frontend/src/store.js"],"sourcesContent":["import {createStore, combineReducers, applyMiddleware } from 'redux' //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'                                      // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { \n    productListReducer, \n    productDetailsReducer, \n    productDeleteReducer, \n    productCreateReducer, \n    productUpdateReducer,\n    productReviewCreateReducer,\n    productTopRatedReducer, } from './reducers/productReducers'\n\nimport { cartReducer } from './reducers/cartReducers'\n\nimport { \n    userLoginReducer, \n    userRegisterReducer, \n    userDetailReducer, \n    userUpdateProfileReducer, \n    userListReducer, \n    userUpdateReducer,\n    userDeleteReducer } from './reducers/userReducers'\n\nimport { \n    orderCreateReducer, \n    orderDetailsReducer, \n    orderPayReducer, \n    orderListMyReducer, \n    orderListReducer, \n    orderDeliverReducer} from './reducers/orderReducers'\n\n\nimport {\npostListReducer, \nworkListReducer\n} from './reducers/mediaReducers'\n\nconst reducer = combineReducers({\n     productList: productListReducer,\n     productDetails: productDetailsReducer,\n     productDelete: productDeleteReducer,\n     productCreate: productCreateReducer,\n     productUpdate: productUpdateReducer,\n     productReviewCreate: productReviewCreateReducer,\n     productTopRated: productTopRatedReducer,\n     \n     cart: cartReducer,\n     userLogin: userLoginReducer,\n     userRegister: userRegisterReducer,\n     userDetails: userDetailReducer,\n     userUpdateProfile: userUpdateProfileReducer,\n     userList: userListReducer,\n     userDelete: userDeleteReducer,\n     userUpdate: userUpdateReducer,\n\n     orderCreate: orderCreateReducer,\n     orderDetails: orderDetailsReducer,\n     orderPay: orderPayReducer,\n     orderListMy: orderListMyReducer,\n     orderList: orderListReducer,\n     orderDeliver: orderDeliverReducer,\n\n     postList: postListReducer,\n     workList: workListReducer\n     \n     \n\n     \n\n}) //reducer uguale alla combinazione di reducers\n//all'avvio dell'app vengono creati in redux contenitori vuoti dei reducers\n\n\n\n\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ?\n    JSON.parse(localStorage.getItem('cartItems')) : [] //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\n    JSON.parse(localStorage.getItem('userInfo')) : null \n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\n    JSON.parse(localStorage.getItem('shippingAddress')) : {} //se localstorage è vuoto ALLORA {}\n\n\n\nconst initialState = {//lo state iniziale che poi viene aggiornato dai reducer è composto da KEY-VALUE con un JSON a secondo valore\n    cart: { \n        cartItems: cartItemsFromStorage,\n        shippingAddress: shippingAddressFromStorage,\n    }, //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n\n    userLogin: { userInfo: userInfoFromStorage} // della sessione precedente\n}\n\n\n\nconst middleware = [thunk] //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState,\n    composeWithDevTools(applyMiddleware(...middleware))) // ... spread operator\n\n\n\nexport default store\n\n//MODUS OPERANDI\n\n//BACKEND\n//views, url\n\n//FRONTEND\n//costants, reducers(&store.js), actions\n//screens"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}