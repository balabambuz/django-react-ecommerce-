{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux'; //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'; // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducers, productDetailsReducers } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nconst reducer = combineReducers({\n  productList: productListReducers,\n  productDetails: productDetailsReducers,\n  cart: cartReducer\n}); //reducer uguale alla combinazione di reducers\n\nconst cartItemsFromStorage = localStorage.getItem('cartItem') ? JSON.parse(localStorage.getItem('cartItems')) : []; //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage\n  } //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n  // della sessione precedente\n};\n\nconst middleware = [thunk]; //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // ... spread operator\n\nexport default store;","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducers","productDetailsReducers","cartReducer","reducer","productList","productDetails","cart","cartItemsFromStorage","localStorage","getItem","JSON","parse","initialState","cartItems","middleware","store"],"sources":["/Users/francesco/Desktop/ecommerce/frontend/src/store.js"],"sourcesContent":["import {createStore, combineReducers, applyMiddleware } from 'redux' //prende tutti i reducers e li combina in un unico reducer\nimport thunk from 'redux-thunk'                                      // thunk chiama action creators che ritornano una funzione invece di un action object  \nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { productListReducers, productDetailsReducers } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\n\nconst reducer = combineReducers({\n     productList: productListReducers,\n     productDetails: productDetailsReducers,\n     cart: cartReducer, \n    }) //reducer uguale alla combinazione di reducers\n\n    const cartItemsFromStorage = localStorage.getItem('cartItem') ?\n            JSON.parse(localStorage.getItem('cartItems')) : [] //se esiste lo prendiamo e lo trasformiamo in JSON altrimenti passiamo un array vuoto\n\nconst initialState = {\n    cart: { cartItems: cartItemsFromStorage} //se era stata già aperta una sessione allora lo state verrà caricato con gli oggetti salvati nel carrello \n                                             // della sessione precedente\n}\n\nconst middleware = [thunk] //passo come array di middleware per aggiungerne di più in una volta\n\nconst store = createStore(reducer, initialState,\n    composeWithDevTools(applyMiddleware(...middleware))) // ... spread operator\n\n\n\nexport default store"],"mappings":"AAAA,SAAQA,WAAW,EAAEC,eAAe,EAAEC,eAAe,QAAQ,OAAO,EAAC;AACrE,OAAOC,KAAK,MAAM,aAAa,EAAsC;AACrE,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,mBAAmB,EAAEC,sBAAsB,QAAQ,4BAA4B;AACxF,SAASC,WAAW,QAAQ,yBAAyB;AAErD,MAAMC,OAAO,GAAGP,eAAe,CAAC;EAC3BQ,WAAW,EAAEJ,mBAAmB;EAChCK,cAAc,EAAEJ,sBAAsB;EACtCK,IAAI,EAAEJ;AACP,CAAC,CAAC,EAAC;;AAEH,MAAMK,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,GACrDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,EAAC;;AAE/D,MAAMG,YAAY,GAAG;EACjBN,IAAI,EAAE;IAAEO,SAAS,EAAEN;EAAoB,CAAC,CAAC;EACA;AAC7C,CAAC;;AAED,MAAMO,UAAU,GAAG,CAAChB,KAAK,CAAC,EAAC;;AAE3B,MAAMiB,KAAK,GAAGpB,WAAW,CAACQ,OAAO,EAAES,YAAY,EAC3Cb,mBAAmB,CAACF,eAAe,CAAC,GAAGiB,UAAU,CAAC,CAAC,CAAC,EAAC;;AAIzD,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}