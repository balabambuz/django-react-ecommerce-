{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.translate = void 0;\nconst translate = async _ref => {\n  let {\n    query,\n    source,\n    target,\n    format,\n    apiurl,\n    apiKey\n  } = _ref;\n  if (!apiurl && !apiKey) throw new TypeError(\"You need an API key to use the public LibreTranslate API!\");\n  if (!apiurl) apiurl = \"https://libretranslate.com\";\n  if (!source) source = \"auto\";\n  let availableLanguages = [];\n  availableLanguages.push(\"auto\");\n  const res1 = await fetch(`${apiurl}/languages`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const languages = await res1.json();\n  languages.forEach(language => {\n    availableLanguages.push(language.code);\n  });\n  if (!availableLanguages.includes(source)) throw new TypeError(\"This language was not found/does not exist.\");\n  if (!availableLanguages.includes(target)) throw new TypeError(\"This language was not found/does not exist.\");\n  const res2 = await fetch(`${apiurl}/translate`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      q: query,\n      source: source,\n      target: target,\n      format: format || \"text\",\n      apiKey: apiKey || \"\"\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  try {\n    let t = await res2.json();\n    return t.translatedText;\n  } catch (err) {\n    throw err;\n  }\n};\nexports.translate = translate;","map":{"version":3,"names":["translate","_ref","query","source","target","format","apiurl","apiKey","TypeError","availableLanguages","push","res1","fetch","method","headers","languages","json","forEach","language","code","includes","res2","body","JSON","stringify","q","t","translatedText","err","exports"],"sources":["/Users/francesco/VSC projects/ecommerce/frontend/node_modules/libretranslate/src/translate.ts"],"sourcesContent":["interface TranslateOptions {\n    query: string;\n    source?: string;\n    target: string;\n    format?: string;\n\tapiurl?: string\n    apiKey?: string;\n}\n\nexport const translate = async({ query, source, target, format, apiurl, apiKey }: TranslateOptions) => {\n    if (!apiurl && !apiKey) throw new TypeError(\"You need an API key to use the public LibreTranslate API!\");\n\tif (!apiurl) apiurl = \"https://libretranslate.com\";\n\tif (!source) source = \"auto\";\n\n\tlet availableLanguages: string[] = [];\n\tavailableLanguages.push(\"auto\");\n\n\tconst res1 = await fetch(`${apiurl}/languages`, {\n\t\tmethod: \"GET\",\n\t\theaders: { \"Content-Type\": \"application/json\" }\n\t})\n\t\n\tconst languages = await res1.json();\n\tlanguages.forEach(language => {\n\t\tavailableLanguages.push(language.code);\n\t});\n\t\n\t\n\tif (!availableLanguages.includes(source)) throw new TypeError(\"This language was not found/does not exist.\");\n\tif (!availableLanguages.includes(target)) throw new TypeError(\"This language was not found/does not exist.\");\n\n\tconst res2 = await fetch(`${apiurl}/translate`, {\n\tmethod: \"POST\",\n\tbody: JSON.stringify({\n\t\tq: query,\n\t\tsource: source,\n\t\ttarget: target,\n\t\tformat: format || \"text\",\n\t\tapiKey: apiKey || \"\",\n\t}),\n\theaders: { \"Content-Type\": \"application/json\" }\n});\n\n  try {\n\tlet t = await res2.json();\n\treturn t.translatedText;\n  } catch (err) {\n\tthrow err;\n  }\n}"],"mappings":";;;;;;AASO,MAAMA,SAAS,GAAG,MAAAC,IAAA,IAA6E;EAAA,IAAvE;IAAEC,KAAK;IAAEC,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAM,CAAoB,GAAAN,IAAA;EAC9F,IAAI,CAACK,MAAM,IAAI,CAACC,MAAM,EAAE,MAAM,IAAIC,SAAS,CAAC,2DAA2D,CAAC;EAC3G,IAAI,CAACF,MAAM,EAAEA,MAAM,GAAG,4BAA4B;EAClD,IAAI,CAACH,MAAM,EAAEA,MAAM,GAAG,MAAM;EAE5B,IAAIM,kBAAkB,GAAa,EAAE;EACrCA,kBAAkB,CAACC,IAAI,CAAC,MAAM,CAAC;EAE/B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAC,GAAGN,MAAM,YAAY,EAAE;IAC/CO,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAkB;GAC7C,CAAC;EAEF,MAAMC,SAAS,GAAG,MAAMJ,IAAI,CAACK,IAAI,EAAE;EACnCD,SAAS,CAACE,OAAO,CAACC,QAAQ,IAAG;IAC5BT,kBAAkB,CAACC,IAAI,CAACQ,QAAQ,CAACC,IAAI,CAAC;EACvC,CAAC,CAAC;EAGF,IAAI,CAACV,kBAAkB,CAACW,QAAQ,CAACjB,MAAM,CAAC,EAAE,MAAM,IAAIK,SAAS,CAAC,6CAA6C,CAAC;EAC5G,IAAI,CAACC,kBAAkB,CAACW,QAAQ,CAAChB,MAAM,CAAC,EAAE,MAAM,IAAII,SAAS,CAAC,6CAA6C,CAAC;EAE5G,MAAMa,IAAI,GAAG,MAAMT,KAAK,CAAC,GAAGN,MAAM,YAAY,EAAE;IAChDO,MAAM,EAAE,MAAM;IACdS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACpBC,CAAC,EAAEvB,KAAK;MACRC,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM,IAAI,MAAM;MACxBE,MAAM,EAAEA,MAAM,IAAI;KAClB,CAAC;IACFO,OAAO,EAAE;MAAE,cAAc,EAAE;IAAkB;GAC7C,CAAC;EAEA,IAAI;IACL,IAAIY,CAAC,GAAG,MAAML,IAAI,CAACL,IAAI,EAAE;IACzB,OAAOU,CAAC,CAACC,cAAc;GACrB,CAAC,OAAOC,GAAG,EAAE;IACf,MAAMA,GAAG;;AAEV,CAAC;AAxCYC,OAAA,CAAA7B,SAAS,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}